<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grammophone.Tasks</name>
    </assembly>
    <members>
        <member name="T:Grammophone.Tasks.ChannelsTaskQueuer`1">
            <summary>
            A container for task queues assigned to channels.
            </summary>
            <typeparam name="C">The type of the channels.</typeparam>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.#ctor(System.Boolean)">
            <summary>
            Create.
            </summary>
            <param name="attachTasksToParent">If true, the tasks are attached to the parent task where the scheduler lives, else tey are independent.</param>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Create.
            </summary>
            <param name="taskCreationOptions">The task creation options used for the root task of a channel.</param>
            <param name="taskContinuationOptions">The task continuation options used for a subsequent task of a channel.</param>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.#ctor">
            <summary>
            Create with default task creation and continuation options.
            </summary>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.QueueTask(`0,System.Action)">
            <summary>
            Queue a task for a channel. Exceptions are handled in <see cref="M:Grammophone.Tasks.ChannelsTaskQueuer`1.HandleException(`0,System.Exception)"/>.
            Use the returned task to attach additional exception handling.
            </summary>
            <param name="channel">The channel for which to queue the task.</param>
            <param name="action">The action to be executed in the task.</param>
            <returns>Returns the task created and queued.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="channel"/> or <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.QueueTask(`0,System.Action,System.Threading.CancellationToken)">
            <summary>
            Queue a task for a channel. Exceptions are handled in <see cref="M:Grammophone.Tasks.ChannelsTaskQueuer`1.HandleException(`0,System.Exception)"/>.
            Use the returned task to attach additional exception handling.
            </summary>
            <param name="channel">The channel for which to queue the task.</param>
            <param name="action">The action to be executed in the task.</param>
            <param name="cancellationToken">The cancellation token to be assigned to the new task.</param>
            <returns>Returns the task created and queued.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="channel"/> or <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.QueueTask``1(`0,System.Func{``0})">
            <summary>
            Queue a task returning a value for a channel. Exceptions are handled in <see cref="M:Grammophone.Tasks.ChannelsTaskQueuer`1.HandleException(`0,System.Exception)"/>.
            Use the returned task to attach additional exception handling or to obtain the returned value.
            </summary>
            <param name="channel">The channel for which to queue the task.</param>
            <param name="function">The function to be executed in the task.</param>
            <returns>Returns the task created and queued, whose <see cref="P:System.Threading.Tasks.Task`1.Result"/> will hold the result of the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="channel"/> or <paramref name="function"/> is null.</exception>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.QueueTask``1(`0,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Queue a task returning a value for a channel. Exceptions are handled in <see cref="M:Grammophone.Tasks.ChannelsTaskQueuer`1.HandleException(`0,System.Exception)"/>.
            Use the returned task to attach additional exception handling or to obtain the returned value.
            </summary>
            <param name="channel">The channel for which to queue the task.</param>
            <param name="function">The function to be executed in the task.</param>
            <param name="cancellationToken">The cancellation token to be assigned to the new task.</param>
            <returns>Returns the task created and queued, whose <see cref="P:System.Threading.Tasks.Task`1.Result"/> will hold the result of the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="channel"/> or <paramref name="function"/> is null.</exception>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.WhenAll">
            <summary>
            Get a task which completes when all the queued tasks for all channels complete.
            </summary>
        </member>
        <member name="M:Grammophone.Tasks.ChannelsTaskQueuer`1.HandleException(`0,System.Exception)">
            <summary>
            Called when any of the queued tasks fails with an exception.
            Override to attach central logging. The default implemention writes to <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <param name="channel">The channel where the task is queued.</param>
            <param name="exception">The exception occured while the task was executed.</param>
        </member>
    </members>
</doc>
